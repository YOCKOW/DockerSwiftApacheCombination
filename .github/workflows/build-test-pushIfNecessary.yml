name: "Build/Test/Push(if necessary)"
on:
  push:
    branches:
      - "**"
    tags:
      - "release-*"
      - "push-test-*"
  pull_request:
    branches:
      - "**"
env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}
jobs:
  set-constants:
    runs-on: ubuntu-latest
    steps:
      - name: Determine the core part of the tag name.
        id: determine-tag-name-core
        env:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          case "$REF_TYPE" in
          branch)
            if [[ "$REF_NAME" == "main" ]]; then
              echo "tag_name_core=latest" >>"$GITHUB_OUTPUT"
              exit 0
            fi
          ;;
          tag)
            if [[ "$REF_NAME" == release-* ]] || [[ "$REF_NAME" == push-test-* ]]; then
              echo "tag_name_core=$REF_NAME" >>"$GITHUB_OUTPUT"
              exit 0
            fi
          ;;
          esac
          echo "tag_name_core=" >>"$GITHUB_OUTPUT"
      - name: Determine full image name
        id: determine-full-image-name
        shell: bash
        run: echo "full_image_name=${DOCKER_REGISTRY,,}/${DOCKER_IMAGE_NAME,,}" >>"$GITHUB_OUTPUT"
    outputs:
      SWIFT_VERSIONS: |
        [
          "6.1.2",
          "6.0.3"
        ]
      DOCKER_FULL_IMAGE_NAME: ${{ steps.determine-full-image-name.outputs.full_image_name }}
      DOCKER_TAG_NAME_CORE: ${{ steps.determine-tag-name-core.outputs.tag_name_core }}
  build-test-pushIfNecessary:
    needs:
      - set-constants
    strategy:
      matrix:
        swift-version: ${{ fromJson(needs.set-constants.outputs.SWIFT_VERSIONS) }}
        host-os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    runs-on: ${{ matrix.host-os }}
    name: "Swift ${{ matrix.swift-version }} / ${{ matrix.host-os }}: Build, Test, and Push the image if necessary."
    env:
      DOCKER_FULL_IMAGE_NAME: ${{ needs.set-constants.outputs.DOCKER_FULL_IMAGE_NAME }}
      DOCKER_TAG_NAME_CORE: ${{ needs.set-constants.outputs.DOCKER_TAG_NAME_CORE }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine 'arch' and 'platform'
        id: arch-and-platform
        run: |
          if [[ "$(dpkg --print-architecture)" == "arm64" ]]; then
            echo "arch=arm64" >>"$GITHUB_OUTPUT"
            echo "platform=linux/arm64" >>"$GITHUB_OUTPUT"
          else
            echo "arch=amd64" >>"$GITHUB_OUTPUT"
            echo "platform=linux/amd64" >>"$GITHUB_OUTPUT"
          fi
      - name: Determine Tag Name
        id: tag-name
        env:
          SWIFT_VERSION: ${{ matrix.swift-version }}
          ARCH: ${{ steps.arch-and-platform.outputs.arch }}
        run: |
          raw_tag_name="swift${SWIFT_VERSION}-${DOCKER_TAG_NAME_CORE}-${ARCH}"
          echo "raw_tag_name=$raw_tag_name" >>"$GITHUB_OUTPUT"
          echo "test_tag_name=test-$raw_tag_name" >>"$GITHUB_OUTPUT"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_FULL_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.tag-name.outputs.raw_tag_name }}
            type=raw,value=${{ steps.tag-name.outputs.test_tag_name }}
      - name: Build Image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: SWIFT_VERSION=${{ matrix.swift-version }}
          platforms: ${{ steps.arch-and-platform.outputs.platform }}
          load: true
          push: false
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test Image
        env:
          TEST_TAG_NAME: ${{ steps.tag-name.outputs.test_tag_name }}
        shell: bash
        run: |
          docker run --rm -t "${DOCKER_FULL_IMAGE_NAME}:$TEST_TAG_NAME" /opt/httpd/bin/apachectl -V
          docker run --rm -t "${DOCKER_FULL_IMAGE_NAME}:$TEST_TAG_NAME" show-licenses
      - name: Push Image if necessary
        if: ${{ env.DOCKER_TAG_NAME_CORE != '' }}
        id: push-image-if-necessary
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: SWIFT_VERSION=${{ matrix.swift-version }}
          platforms: ${{ steps.arch-and-platform.outputs.platform }}
          load: false
          push: true
          tags: "${{ env.DOCKER_FULL_IMAGE_NAME }}:${{ steps.tag-name.outputs.raw_tag_name }}"
          labels: ${{ steps.metadata.outputs.labels }}
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Generate artifact attestation if necessary
        if: ${{ env.DOCKER_TAG_NAME_CORE != '' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.DOCKER_FULL_IMAGE_NAME }}
          subject-digest: ${{ steps.push-image-if-necessary.outputs.digest }}
          push-to-registry: true
  merge-images:
    needs: 
      - set-constants
      - build-test-pushIfNecessary
    if: ${{ needs.set-constants.outputs.DOCKER_TAG_NAME_CORE != '' }}
    strategy:
      matrix:
        swift-version: ${{ fromJson(needs.set-constants.outputs.SWIFT_VERSIONS) }}
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    name: Merge Multiplatform Images
    env:
      DOCKER_FULL_IMAGE_NAME: ${{ needs.set-constants.outputs.DOCKER_FULL_IMAGE_NAME }}
      DOCKER_TAG_NAME_CORE: ${{ needs.set-constants.outputs.DOCKER_TAG_NAME_CORE }}
    steps:
      - name: Check precondition
        run: '[[ -n "$DOCKER_TAG_NAME_CORE" ]]'
      - name: Install jq
        run: sudo apt update && sudo apt install jq
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Digests and Create Manifest
        env:
          TAG_NAME: swift${{ matrix.swift-version }}-${{ env.DOCKER_TAG_NAME_CORE }}
        run: |
          digest_amd64=$(docker buildx imagetools inspect ${DOCKER_FULL_IMAGE_NAME}:${TAG_NAME}-amd64 --raw | jq -r '.manifests[] | select(.platform.architecture=="amd64") | .digest')
          digest_arm64=$(docker buildx imagetools inspect ${DOCKER_FULL_IMAGE_NAME}:${TAG_NAME}-arm64 --raw | jq -r '.manifests[] | select(.platform.architecture=="arm64") | .digest')

          docker manifest create ${DOCKER_FULL_IMAGE_NAME}:${TAG_NAME} \
            ${DOCKER_FULL_IMAGE_NAME}@$digest_amd64 \
            ${DOCKER_FULL_IMAGE_NAME}@$digest_arm64
          docker manifest annotate ${DOCKER_FULL_IMAGE_NAME}:${TAG_NAME} \
            ${DOCKER_FULL_IMAGE_NAME}@$digest_amd64 --os linux --arch amd64
          docker manifest annotate ${DOCKER_FULL_IMAGE_NAME}:${TAG_NAME} \
            ${DOCKER_FULL_IMAGE_NAME}@$digest_arm64 --os linux --arch arm64
          docker manifest push ${DOCKER_FULL_IMAGE_NAME}:${TAG_NAME}
