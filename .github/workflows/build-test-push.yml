name: "Build/Test/Push(if necessary)"
on:
  push:
    branches:
      - "**"
    tags:
      - "release-*"
      - "push-test-*"
    paths:
      - "**/Dockerfile"
      - ".github/workflows/**.yml"
permissions:
  packages: write
  contents: read
  attestations: write
  id-token: write
jobs:
  constants:
    name: Set Global Constants
    runs-on: ubuntu-latest
    steps:
      - name: Define Constants
        id: define-constants
        env:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          case "$REF_TYPE" in
          branch)
            if [[ "$REF_NAME" == "main" ]]; then
              {
                echo "tag_name_suffixes<<__TAG_NAME_SUFFIXES__"
                echo "latest"
                echo release-$(date '+%Y%m%d')-latest
                echo release-$(date '+%Y%m%d-%H%M%S')
                echo "__TAG_NAME_SUFFIXES__"
              } >>"$GITHUB_OUTPUT"
            fi
          ;;
          tag)
            if [[ "$REF_NAME" == release-* ]] || [[ "$REF_NAME" == push-test-* ]]; then
              echo "tag_name_suffixes=$REF_NAME" >>"$GITHUB_OUTPUT"
            fi
          ;;
          *)
            echo "tag_name_suffixes=" >>"$GITHUB_OUTPUT"
          ;;
          esac
      - name: Determine images to force push
        id: determine-force-push
        uses: actions/github-script@v7
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        with:
          result-encoding: string
          script: |
            let forcePushImages = [];
            const forcePushRegex = /^\[\s*force\-push\s*:(.+)\]$/;
            const messageLines = process.env.COMMIT_MESSAGE.split(/\n/).map(line => line.trim());
            for (const line of messageLines) {
              const images = line.match(forcePushRegex);
              if (images) {
                forcePushImages = forcePushImages.concat(images[1].split(/,\s*/).map(i => i.trim()));
              }
            }
            return forcePushImages.filter(i => i.length > 0).join("\n");
    outputs:
      DOCKER_REGISTRY: ghcr.io
      DOCKER_USERNAME: ${{ github.actor }}
      DOCKER_DEPS_IMAGE_BASENAME: swift-de-cgi-deps
      DOCKER_PROD_IMAGE_BASENAME: swift-de-cgi
      DOCKER_TAG_NAME_SUFFIXES: ${{ steps.define-constants.outputs.tag_name_suffixes }}
      APACHE_HTTP_SERVER_VERSION: "2.4.65"
      APACHE_APR_VERSION: "1.7.6"
      APACHE_APRUTIL_VERSION: "1.6.3"
      EXPAT_VERSION: "2.7.1"
      LIBXML2_VERSION: "2.14.5"
      LUA_VERSION: "5.4.8"
      LUA_HASH: "4f18ddae154e793e46eeab727c59ef1c0c0c2b744e7b94219710d76f530629ae"
      NGHTTP2_VERSION: "1.66.0"
      OPENSSL_VERSION: "3.5.2"
      PCRE2_VERSION: "10.45"
      ZLIB_VERSION: "1.3.1"
      FORCE_PUSH: ${{ steps.determine-force-push.outputs.result }}
      BASE_OS_IMAGES: |
        [
          {
            "image_name": "ubuntu:noble",
            "os_label": "noble"
          },
          {
            "image_name": "ubuntu:jammy",
            "os_label": "jammy"
          }
        ]
      SWIFT_VERSIONS: |
        [
          "6.1.2",
          "6.0.3"
        ]
  build-deps:
    needs:
      - constants
    strategy:
      matrix:
        include: ${{ fromJson(needs.constants.outputs.BASE_OS_IMAGES) }}
    name: Build Dependencies for ${{ matrix.os_label }}
    uses: ./.github/workflows/reusable_deploy-deps.yml
    with:
      docker-registry: ${{ needs.constants.outputs.DOCKER_REGISTRY }}
      docker-username: ${{ needs.constants.outputs.DOCKER_USERNAME }}
      docker-deps-image-basename: ${{ needs.constants.outputs.DOCKER_DEPS_IMAGE_BASENAME }}
      tag-name-suffixes: ${{ needs.constants.outputs.DOCKER_TAG_NAME_SUFFIXES }}
      base-os-image: ${{ matrix.image_name }}
      base-os-label: ${{ matrix.os_label }}
      apache-http-server-version: ${{ needs.constants.outputs.APACHE_HTTP_SERVER_VERSION }}
      apache-apr-version: ${{ needs.constants.outputs.APACHE_APR_VERSION }}
      apache-apr-util-version: ${{ needs.constants.outputs.APACHE_APRUTIL_VERSION }}
      expat-version: ${{ needs.constants.outputs.EXPAT_VERSION }}
      libxml2-version: ${{ needs.constants.outputs.LIBXML2_VERSION }}
      lua-version: ${{ needs.constants.outputs.LUA_VERSION }}
      lua-hash: ${{ needs.constants.outputs.LUA_HASH }}
      nghttp2-version: ${{ needs.constants.outputs.NGHTTP2_VERSION }}
      openssl-version: ${{ needs.constants.outputs.OPENSSL_VERSION }}
      pcre2-version: ${{ needs.constants.outputs.PCRE2_VERSION }}
      zlib-version: ${{ needs.constants.outputs.ZLIB_VERSION }}
      force-push: ${{ needs.constants.outputs.FORCE_PUSH }}
    secrets:
      password: ${{ secrets.GITHUB_TOKEN }}
  generate-swift-image-build-conditions:
    name: Generate Swift image build conditions
    needs:
      - constants
      - build-deps
    runs-on: ubuntu-latest
    env:
      ARTIFACTS_DIR: artifacts
      BASE_OS_IMAGES_JSON: ${{ needs.constants.outputs.BASE_OS_IMAGES }}
      SWIFT_VERSIONS_JSON: ${{ needs.constants.outputs.SWIFT_VERSIONS }}
    steps:
      - name: Download Results
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.ARTIFACTS_DIR }}
          pattern: DepsResults-*
      - name: Arrange Deps Results
        id: arrange-deps-results
        uses: actions/github-script@v7
        with:
          script: |
            const labels = JSON.parse(process.env.BASE_OS_IMAGES_JSON).map(item => item.os_label);
            if (labels.length < 1) {
              throw new Error("No labels?!");
            }

            let results = {
              "apache_http_server_image": {},
              "skipped": {}
            };

            const fs = require('fs');
            const artifactsDir = process.env.ARTIFACTS_DIR;
            for (const label of labels) {
              const apacheHTTPServerImageFilename = `${artifactsDir}/DepsResults-${label}/apache-http-server-image-${label}`;
              results.apache_http_server_image[label] = fs.readFileSync(apacheHTTPServerImageFilename, 'utf8').toString();

              const skippedFilename = `${artifactsDir}/DepsResults-${label}/skipped-${label}`;
              const skipped = fs.readFileSync(skippedFilename, 'utf8').toString();
              results.skipped[label] = (skipped == 'true') ? true : false;
            }

            return results;
      - name: Determine whether the image should be pushed forcibly
        id: force-push
        uses: actions/github-script@v7
        env:
          FORCE_PUSH: ${{ needs.constants.outputs.FORCE_PUSH }}
        with:
          result-encoding: string
          script: |
            if (process.env.FORCE_PUSH.split(/\n/).some(line => /swift/i.test(line))) {
              return "true";
            }
            return "false";
      - name: Generate Tags
        id: generate-tags
        uses: actions/github-script@v7
        env:
          TAG_SUFFIXES: ${{ needs.constants.outputs.DOCKER_TAG_NAME_SUFFIXES }}
          APACHE_HTTP_SERVER_VERSION: ${{ needs.constants.outputs.APACHE_HTTP_SERVER_VERSION }}
        with:
          script: |
            const tags = {}

            const swiftVersions = JSON.parse(process.env.SWIFT_VERSIONS_JSON);
            const labels = JSON.parse(process.env.BASE_OS_IMAGES_JSON).map(item => item.os_label);
            const tagSuffixes = process.env.TAG_SUFFIXES.split(/\n/).map(line => line.trim()).filter(line => line.length > 0);
            const apacheVersion = process.env.APACHE_HTTP_SERVER_VERSION;

            for (const swiftVersion of swiftVersions) {
              if (!tags.hasOwnProperty(swiftVersion)) {
                tags[swiftVersion] = {};
              }
              for (const label of labels) {
                if (!tags[swiftVersion].hasOwnProperty(label)) {
                  tags[swiftVersion][label] = '';
                }
                if (tagSuffixes.length < 1) {
                  tags[swiftVersion][label] += `Swift_${swiftVersion}-${label}\n`;
                  tags[swiftVersion][label] += `Swift_${swiftVersion}-ApacheHTTPServer_${apacheVersion}-${label}\n`;
                } else {
                  for (const suffix of tagSuffixes) {
                    tags[swiftVersion][label] += `Swift_${swiftVersion}-${label}-${suffix}\n`;
                    tags[swiftVersion][label] += `Swift_${swiftVersion}-ApacheHTTPServer_${apacheVersion}-${label}-${suffix}\n`;
                  }
                }
              }
            }

            return tags;
      - name: Generate Job Matrix Inclusion
        id: generate-job-matrix-inclusion
        uses: actions/github-script@v7
        with:
          script: |
            /*
            This is necessary because there's unexpected feature (bug?) in GitHub Actions.

            ```
            matrix:
              include: ${{ fromJson(needs.constants.outputs.BASE_OS_IMAGES) }}
              swift-version: ${{ fromJson(needs.constants.outputs.SWIFT_VERSIONS) }}
            ```

            doesn't work expectedly...
            */

            const baseOSImages = JSON.parse(process.env.BASE_OS_IMAGES_JSON);
            const swiftVersions = JSON.parse(process.env.SWIFT_VERSIONS_JSON);

            const inclusion = [];
            for (const baseOSImageItem of baseOSImages) {
              for (const swiftVersion of swiftVersions) {
                inclusion.push({
                  "swift-version": swiftVersion,
                  "image_name": baseOSImageItem.image_name,
                  "os_label": baseOSImageItem.os_label
                });
              }
            }

            if (inclusion.length != baseOSImages.length * swiftVersions.length) {
              throw new Error('Unexpected number of matrix includ');
            }
            return inclusion;
      - name: View Generated Conditions
        env:
          ARRANGED_DEPS_RESULTS_JSON: ${{ steps.arrange-deps-results.outputs.result }}
          FORCE_PUSH: ${{ steps.force-push.outputs.result }}
          TAGS_JSON: ${{ steps.generate-tags.outputs.result }}
          MATRIX_INCLUSION: ${{ steps.generate-job-matrix-inclusion.outputs.result }}
        run: |
          echo "Deps Results (JSON): $ARRANGED_DEPS_RESULTS_JSON"
          echo "Force Push?: $FORCE_PUSH"
          echo "Tags (JSON): $TAGS_JSON"
          echo "Matrix Includes (JSON): $MATRIX_INCLUSION"
    outputs:
      arranged-deps-results-json: ${{ steps.arrange-deps-results.outputs.result }}
      force-push: ${{ steps.force-push.outputs.result }}
      tags-json: ${{ steps.generate-tags.outputs.result }}
      matrix-inclusion: ${{ steps.generate-job-matrix-inclusion.outputs.result }}
  build-prod:
    needs:
      - constants
      - generate-swift-image-build-conditions
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-swift-image-build-conditions.outputs.matrix-inclusion) }}
    name: Build Swift ${{ matrix.swift-version }} image for ${{ matrix.os_label }}
    uses: ./.github/workflows/reusable_build-multiplatform-image.yml
    with:
      if-absent: >-
        ${{
          needs.generate-swift-image-build-conditions.outputs.force-push != 'true' &&
          fromJson(needs.generate-swift-image-build-conditions.outputs.arranged-deps-results-json).skipped[matrix.os_label]
        }}
      dockerfile: ./images/prod/Swift/Dockerfile
      build-args: |
        SWIFT_VERSION=${{ matrix.swift-version }}
        BASE_OS_LABEL=${{ matrix.os_label }}
        APACHE_HTTP_SERVER_IMAGE=${{ fromJson(needs.generate-swift-image-build-conditions.outputs.arranged-deps-results-json).apache_http_server_image[matrix.os_label] }}
      registry: ${{ needs.constants.outputs.DOCKER_REGISTRY }}
      username: ${{ needs.constants.outputs.DOCKER_USERNAME }}
      image-basename: ${{ needs.constants.outputs.DOCKER_PROD_IMAGE_BASENAME }}
      tags: ${{ fromJson(needs.generate-swift-image-build-conditions.outputs.tags-json)[matrix.swift-version][matrix.os_label] }}
      test-script: ./tools/test-prod
      push: true
    secrets:
      password: ${{ secrets.GITHUB_TOKEN }}
