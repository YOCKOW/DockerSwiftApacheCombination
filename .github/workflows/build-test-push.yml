name: "Build/Test/Push(if necessary)"
on:
  push:
    branches:
      - "**"
    tags:
      - "release-*"
      - "push-test-*"
    paths:
      - "**/Dockerfile"
      - ".github/workflows/**.yml"
permissions:
  packages: write
  contents: read
  attestations: write
  id-token: write
jobs:
  constants:
    name: Set Global Constants
    runs-on: ubuntu-latest
    steps:
      - name: Define Constants
        id: define-constants
        env:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          case "$REF_TYPE" in
          branch)
            if [[ "$REF_NAME" == "main" ]]; then
              {
                echo "tag_name_suffixes<<__TAG_NAME_SUFFIXES__"
                echo "latest"
                echo release-$(date '+%Y%m%d-%H%M%S')
                echo "__TAG_NAME_SUFFIXES__"
              } >>"$GITHUB_OUTPUT"
            fi
          ;;
          tag)
            if [[ "$REF_NAME" == release-* ]] || [[ "$REF_NAME" == push-test-* ]]; then
              echo "tag_name_suffixes=$REF_NAME" >>"$GITHUB_OUTPUT"
            fi
          ;;
          *)
            echo "tag_name_suffixes=" >>"$GITHUB_OUTPUT"
          ;;
          esac
      - name: Determine images to force push
        id: determine-force-push
        uses: actions/github-script@v7
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        with:
          result-encoding: string
          script: |
            let forcePushImages = [];
            const forcePushRegex = /^\[\s*force\-push\s*:(.+)\]$/;
            const messageLines = process.env.COMMIT_MESSAGE.split(/\n/).map(line => line.trim());
            for (const line of messageLines) {
              const images = line.match(forcePushRegex);
              if (images) {
                forcePushImages = forcePushImages.concat(images[1].split(/,\s*/).map(i => i.trim()));
              }
            }
            return forcePushImages.filter(i => i.length > 0).join("\n");
    outputs:
      DOCKER_REGISTRY: ghcr.io
      DOCKER_USERNAME: ${{ github.actor }}
      DOCKER_DEPS_IMAGE_BASENAME: swift-de-cgi-deps
      DOCKER_IMAGE_BASENAME: swift-de-cgi
      DOCKER_TAG_NAME_SUFFIXES: ${{ steps.define-constants.outputs.tag_name_suffixes }}
      APACHE_HTTP_SERVER_VERSION: "2.4.63"
      APACHE_APR_VERSION: "1.7.6"
      APACHE_APRUTIL_VERSION: "1.6.3"
      EXPAT_VERSION: "2.7.1"
      LIBXML2_VERSION: "2.14.3"
      LUA_VERSION: "5.4.8"
      LUA_HASH: "4f18ddae154e793e46eeab727c59ef1c0c0c2b744e7b94219710d76f530629ae"
      NGHTTP2_VERSION: "1.65.0"
      OPENSSL_VERSION: "3.5.0"
      PCRE2_VERSION: "10.45"
      ZLIB_VERSION: "1.3.1"
      FORCE_PUSH: ${{ steps.determine-force-push.outputs.result }}
      BASE_OS_IMAGES: |
        [
          {
            "image_name": "ubuntu:noble",
            "os_label": "noble"
          },
          {
            "image_name": "ubuntu:jammy",
            "os_label": "jammy"
          }
        ]
  build-deps:
    needs:
      - constants
    strategy:
      matrix:
        include: ${{ fromJson(needs.constants.outputs.BASE_OS_IMAGES) }}
    name: Build Dependencies for ${{ matrix.os_label }}
    uses: ./.github/workflows/reusable_deploy-deps.yml
    with:
      docker-registry: ${{ needs.constants.outputs.DOCKER_REGISTRY }}
      docker-username: ${{ needs.constants.outputs.DOCKER_USERNAME }}
      docker-deps-image-basename: ${{ needs.constants.outputs.DOCKER_DEPS_IMAGE_BASENAME }}
      docker-image-basename: ${{ needs.constants.outputs.DOCKER_IMAGE_BASENAME }}
      tag-name-suffixes: ${{ needs.constants.outputs.DOCKER_TAG_NAME_SUFFIXES }}
      base-os-image: ${{ matrix.image_name }}
      base-os-label: ${{ matrix.os_label }}
      apache-http-server-version: ${{ needs.constants.outputs.APACHE_HTTP_SERVER_VERSION }}
      apache-apr-version: ${{ needs.constants.outputs.APACHE_APR_VERSION }}
      apache-apr-util-version: ${{ needs.constants.outputs.APACHE_APRUTIL_VERSION }}
      expat-version: ${{ needs.constants.outputs.EXPAT_VERSION }}
      libxml2-version: ${{ needs.constants.outputs.LIBXML2_VERSION }}
      lua-version: ${{ needs.constants.outputs.LUA_VERSION }}
      lua-hash: ${{ needs.constants.outputs.LUA_HASH }}
      nghttp2-version: ${{ needs.constants.outputs.NGHTTP2_VERSION }}
      openssl-version: ${{ needs.constants.outputs.OPENSSL_VERSION }}
      pcre2-version: ${{ needs.constants.outputs.PCRE2_VERSION }}
      zlib-version: ${{ needs.constants.outputs.ZLIB_VERSION }}
      force-push: ${{ needs.constants.outputs.FORCE_PUSH }}
    secrets:
      password: ${{ secrets.GITHUB_TOKEN }}
